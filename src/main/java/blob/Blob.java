package blob;

import blob.command.Command;
import blob.exception.BlobExceptions;
import blob.parser.Parser;
import blob.storage.Storage;
import blob.ui.Ui;
import java.io.IOException;

/**
 * Main class of the Blob application.
 * <p>
 * This class initializes and coordinates the various components of the application, such as:
 * <ul>
 *     <li>{@link Ui} - Handles user interactions and displays output.</li>
 *     <li>{@link Storage} - Manages saving and loading task data.</li>
 *     <li>{@link Parser} - Interprets user commands.</li>
 *     <li>{@link TaskList} - Stores and manipulates user tasks.</li>
 * </ul>
 * </p>
 */
public class Blob {
    private final Storage storage;
    private TaskList tasks;
    private final Ui ui;
    private final Parser parser;

    /**
     * Constructs the Blob application, initializing the storage, UI, and command parser.
     * <p>
     * If an error occurs while loading tasks from storage, an empty task list is initialized instead.
     * </p>
     *
     * @param filePath The path to the file where tasks are stored and loaded from.
     */
    public Blob(String filePath) {
        ui = new Ui();
        parser = new Parser();
        storage = new Storage(filePath);
        try {
            tasks = new TaskList(storage.load());
        } catch (IOException e) {
            ui.showError("Error loading tasks: " + e.getMessage());
            tasks = new TaskList();
        }
    }

    /**
     * Processes user input and returns a response string.
     * <p>
     * This method:
     * <ul>
     *     <li>Parses the user's input into a {@link Command}.</li>
     *     <li>Executes the command, modifying the task list if necessary.</li>
     *     <li>Retrieves and returns the processed output from {@link Ui}.</li>
     * </ul>
     * </p>
     *
     * @param input The user input command as a string.
     * @return The response generated by executing the command.
     */
    public String getResponse(String input) {
        try {
            Command command = parser.parse(input);
            command.execute(tasks, ui, storage);
            return ui.getOutput();
        } catch (BlobExceptions.EmptyDescriptionException | BlobExceptions.UnknownCommandException |
                 BlobExceptions.IllegalFormatException | BlobExceptions.WrongTaskIndexException |
                 BlobExceptions.NoTaskException e) {
            return "Error: " + e.getMessage();
        } catch (IOException e) {
            return "File I/O error: " + e.getMessage();
        } catch (Exception e) {
            return "An unexpected error occurred: " + e.getMessage();
        }
    }

    /**
     * Runs the main loop of the application, processing user commands until the exit command is received.
     * <p>
     * This method:
     * <ul>
     *     <li>Displays a greeting message to the user.</li>
     *     <li>Continuously reads user input, parses and executes commands.</li>
     *     <li>Prints the generated response.</li>
     *     <li>Terminates when an exit command is detected.</li>
     * </ul>
     * </p>
     */
    public void run() {
        ui.showGreeting();
        boolean isRunning = true;
        while (isRunning) {
            String input = ui.readCommand();
            try {
                Command command = parser.parse(input);
                command.execute(tasks, ui, storage);
                System.out.println(ui.getOutput());

                if (command.isExitCommand()) {
                    isRunning = false;
                }
            } catch (Exception e) {
                System.out.println("An unexpected error occurred: " + e.getMessage());
            }
        }
        ui.closeScanner();
    }


    /**
     * The entry point of the application.
     *
     * This method initializes an instance of {@code Blob} and starts the application loop.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        new Blob("data/Blob.txt").run();
    }
}

